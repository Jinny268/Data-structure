<Red-black 트리>

1. Red-black 트리의 정의 (다음의 성질을 가지는 이진탐색트리)
 (1) 모든 노드는 red 혹은 balack 색을 가진다.
 (2) 루트의 색은 블랙이다.
 (3) 레드 색을 가지는 노드의 자식 노드가 있으면, 이 자식 노드의 색은 블랙이다.
 (4) 루트에서 모든 null child(null link)까지의 경로들에 있는 블랙 색 노드의 수는 동일하다.

2. Red-black 트리의 높이 분석
 - 보조정리: n개의 노드를 가지는 Red-black 트리의 높이는 2 log2 (n+1)이하이다.
 
3. Red-black 트리의 원소 삽입
 - 각 노드는 color field (color), parent field (p), left child (left), right child (right)를 가진다.
 - 노드 x의 field f의 접근: x->f
 - 노드 x의 black height: x로부터 leaf까지 black 노드 수 (단, x는 제외)
 
4. Red-black 트리의 원소 삽입 코드
rbInsert(x)   // red-black tree insertion
  treeInsert(x);   // x는 삽입되는 노드
  x->color = RED;
  // Move violation of #3 up tree, maintaining #4 as invariant:
  while (x!=root && x->p->color == RED)   // color는 노드의 색임
      if (x->p == x->p->p->left)   // p는 parent를 나타내고 left는 left child를,
          y = x->p->p->right   // right는 right child를 나타낸다.
  // 26~30줄까지 Case1
          if (y->color == RED)
              x->p->color = BLACK
              y->color = BLACK
              x->p->p->color = RED
              x = x->p->p
  // 32~35줄까지 Case2
          else   // y->color == BLACK
              if (x == x->p->right)
                  x = x->p
                  leftRotate(x)
  // 37~39줄까지 Case3
              x->p->color = BLACK
              x->p->p->color = RED
              rightRotate(x->p->p)
  // 이후 Case4~Case6
      else   // x->p == x->p->p->right
      (same as above, but with
       “right” & “left” exchanged)
       
5. Red-black 트리의 수행 시간
 (1) 원소 검색: O(logn)
 (2) 원소 삽입: O(logn)
 (3) 원소 삭제: O(logn)
