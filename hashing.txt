<해싱>

1. 해싱에 대해서..
 - [핵심] 해싱은 O(log n) 시간보다 빠른 연산을 위해, 키와 1차원 리스트의 인덱스의 관계를 이용하여 키(원소)를 저장한다.
 - 키를 배열의 인덱스로 그대로 사용하면 메모리 낭비가 심해질 수 있다.
 - [문제 해결 방안] 키를 변환하여 배열의 인덱스로 사용한다.
 - 키를 간단한 함수를 사용해 변환한 값을 배열의 인덱스로 이용하여 원소를 저장하는 것을 해싱이라고 한다.
 - 해싱에 사용되는 함수를 해시함수라고 한다.
 - 해시함수가 계산한 값을 해시값 또는 해시주소라고 한다.
 - 항목이 해시값에 따라 저장되는 배열을 해시테이블이라고 한다.

2. 해싱의 문제점
 - 아무리 우수한 해시함수를 사용하더라도, 2개 이상의 원소를 해시테이블의 동일한 곳에 저장하는 경우가 발생한다.
 - 서로 다른 키들이 동일한 해시값을 가질 때 충돌이 발생한다.

3. 해시함수
 - 가장 이상적인 해시함수는 키들을 균등하게 해시테이블의 인덱스로 변환하는 함수이다.
 - 일반적으로 키들은 부여된 의미나 특성을 가지므로 키의 가장 앞 부분 또는 뒤의 몇 자리 등을 취하여 해시값으로 사용하는 방식의 해시함수는 많은 충돌을 야기한다.
 - 균등하게 변환한다는 것은 키들을 해시테이블에 랜덤하게 흩어지도록 저장하는 것을 뜻한다.
 - 해시함수는 키들을 균등하게 해시테이블의 인덱스로 변환하기 위해 의미가 부여되어 있는 키를 간단한 계산을 통해 뒤죽박죽으로 만든 후 해시테이블의 크기에 맞도록 해시값을 계산한다.
 - 아무리 균등한 결과를 보장하는 해시함수라도 함수 계산 자체에 긴 시간이 소요된다면 해싱의 장점인 연산의 신속성을 상실하므로 그 가치를 잃는다.
 - 해쉬 함수는 주소 계산이 빨라야하며, 가급적 서로 다른 키의 함수 값이 중복되어서는 안된다.
 - 균일 해쉬 함수는 M개의 slot 각각에 임의의 k가 대응될 확률은 모두 같다.
 
 4. 대표적인 해시함수
 - 중간제곱 함수: 키를 제곱한 후, 적절한 크기의 중간부분을 해시값으로 사용한다.
 - 접기 함수: 큰 자리수를 갖는 십진수를 키로 사용하는 경우, 몇 자리씩 일정하게 끊어서 만든 숫자들의 합을 이용해 해시값을 만든다.
 - 나눗셈 함수: 키를 소수 M(나눗셈 연산을 했을 때, 소수가 키들을 균등하게 인덱스로 변환시키는 성질을 갖기 때문에 이용)으로 나눈 뒤, 그 나머지를 해시값으로 사용한다. h(key) = key % M이고, 따라서 해시테이블의 인덱스는 0에서 M-1이 된다.
 - 곱셈 함수: 1보다 작은 실수 를 키에 곱하여 얻은 숫자의 소수 부분을 테이블 크기 M과 곱한다. 이렇게 나온 값의 정수 부분을 해시값으로 사용한다.
 - 위 해시 함수들의 공통점: 키의 모든 자리의 숫자들이 함수 계산에 참여함으로써 계산 결과에서는 원래의 키에 부여된 의미나 특성을 찾아볼 수 없게 된다.
 - 가장 널리 사용되는 해시함수: 나눗셈 함수
 
